//* 1) fs modÃ¼lÃ¼nÃ¼ bu dosyayya Ã§aÄŸÄ±rma
const fs = require('fs');

//* FS (FileSystem)
//* Node.js modÃ¼llerden bir tanesi.
//* Sahip olduÄŸu fonksiyonlar sayesinde
//* BilgisayarÄ±n dosya dizinin deÄŸiÅŸimler yaÄŸabilicez.
//* Dosya Okuma / Yazma

/*
 ! Senkron > Blocking YÃ¶ntemle
 * Senkron iÅŸlemler sÄ±rasÄ±yla geÃ§ekleÅŸir
 * Yani senk. iÅŸlemlerde bir iÅŸlem sÃ¼rÃ¼yorken diÄŸer iÅŸlem baÅŸlamaz
 * Biri bittikten sonra bir sonraki Ã§alÄ±ÅŸÄ±r
 * Bu nedenle tek bir iÅŸlem iÃ§in uzun sÃ¼re beklendiÄŸi senaryoda uygulama
 * uzun bir sÃ¼re boyun o iÅŸlem dÄ±ÅŸÄ±nda baÅŸka bir gÃ¶rev yapamayabilir
 * Dosya okuma / veritabanÄ± sorgularÄ± iÅŸlemlerde senkron methodu naidren kullanÄ±lÄ±rÄ±z.
 */

//* 2) Dosya Okuma
const text = fs.readFileSync('./txt/input.txt', 'utf-8');
// console.log('doysa okundu');

//* 3) Dosya Yazma
//* GÃ¶nderilecek metni hazÄ±rla
const newText = `
    Avakado hakkÄ±nda aldÄ±ÄŸÄ±m bilgiler:
     ${text}
     OluÅŸturulma Tarihi: 
     ${Date.now()}
`;

//* Yeni dosya oluÅŸturup iÃ§eriÄŸini belirle
fs.writeFileSync('./txt/output.txt', newText);
// console.log('doysa yazÄ±ldÄ±');

// console.log('KullanÄ±cÄ± giriÅŸi yapÄ±albiliyor....');

//! Asenkron > Non Blocking
/*
 * Bir iÅŸlemi arkaplanda yapmaya gÃ¶rev veriyoruz
 * GÃ¶revi bitince bir tane callback function tetikleniyor.
 * Bu sayede biz zaman alÄ±cak iÅŸlemleri arkplanda yaparken
 * Projedeki iÅŸlevlerin duraksamanÄ±n Ã¶nÃ¼ne geÃ§iyoruz
 */

fs.readFile('./txt/start.txt', 'utf8', (err, data) => {
  // dosaya okuma sÄ±rasÄ±nda hata oluÅŸursa burasÄ± Ã§alÄ±ÅŸÄ±r
  if (err) return console.log('ÃœzgÃ¼nÃ¼z Hata OluÅŸtu! ğŸ’¥');

  // dosya okuma kÄ±smÄ±nda hata yoksa burasÄ± Ã§alÄ±ÅŸÄ±r
  // start dosyasÄ±nda hangi dosya ismi gelirse o dosyayÄ± oku
  fs.readFile(`txt/${data}.txt`, 'utf-8', (err, data) => {
    console.log('Okunan Veri:', data);
  });
});

//* 2) Dosya Okuma
const text2 = fs.readFileSync('./txt/input.txt', 'utf-8');

//! GÃ¶rev
//* Ä°sim ve iÃ§erik dosyalarÄ±nÄ±  okuyun
//* Yeni bir dosya oluÅŸturun oluÅŸturdÄŸunuz dosyanÄ±n ismi
//* isim.txt dosyasÄ±na ne yazÄ±ldÄ±ysa o olsun
//* oluÅŸturlan yeni dosyasnÄ±n iÃ§eirÄŸi icerik.txt dosyasÄ±ndan
//* hangi yazÄ±Ä± geldiyse o olsun

//? Senkron Ã‡Ã¶zÃ¼m
// AdÄ±m 1: isim ve iÃ§eriÄŸi al
const title = fs.readFileSync('./challange/isim.txt', 'utf-8');
const content = fs.readFileSync('./challange/icerik.txt', 'utf-8');

// AdÄ±m 2: isim ve iÃ§riÄŸi dinamik bir dosya oluÅŸtur
fs.writeFileSync(`./challange/${title}.txt`, content);

//? Asenkron Ã‡Ã¶zÃ¼m
// 1) Ä°smi Al
fs.readFile('./challange/isim.txt', 'utf-8', (err, title1) => {
  if (err) return console.log('Ä°sim AlÄ±namadÄ±');

  // 2) Ä°Ã§eriÄŸi al
  fs.readFile('./challange/icerik.txt', 'utf-8', (err2, content1) => {
    if (err2) return console.log('Ä°Ã§eirk alÄ±namadÄ±');

    // 3) Yeni dosya oluÅŸtur
    fs.writeFileSync(`./challange/${title1}.txt`, content1);
  });
});
